package main

import (
	"fmt"
	"sloteriaa/internal/personnage"
	"sloteriaa/struct/objet"
	"strings"

	"github.com/eiannone/keyboard"
)

// Limite de poids totale autoris√©e dans l'inventaire
const PoidsMaxInventaire = 50

// poidsConnus mappe les objets connus √† leur poids (par d√©faut 1 si inconnu)
var poidsConnus = map[string]int{
	"potion": 1,
}

// PoidsObjet retourne le poids d'un objet (insensible √† la casse)
func PoidsObjet(nom string) int {
	if p, ok := poidsConnus[strings.ToLower(nom)]; ok {
		return p
	}
	return 1
}

// estMateriau v√©rifie si un objet est un mat√©riau de craft
func estMateriau(nom string) bool {
	materiaux := []string{
		"cuir", "cuir renforc√©", "fer", "fer renforc√©",
		"pierre", "pierre pr√©cieuse", "gemme", "cristal",
		"bois", "bois dur", "√©corce", "r√©sine",
		"os", "os ancien", "dent", "griffe",
		"plume", "plume rare", "√©cailles", "√©cailles de dragon",
		"soie", "soie d'araign√©e", "fil", "corde",
		"poudre", "poudre magique", "essence", "√©lixir",
		"minerai", "minerai rare", "cristal de mana", "gemme de pouvoir",
	}

	nomLower := strings.ToLower(nom)
	for _, mat := range materiaux {
		if strings.Contains(nomLower, strings.ToLower(mat)) {
			return true
		}
	}
	return false
}

// PoidsTotal calcule le poids total actuel de l'inventaire
func PoidsTotal(j *personnage.Personnage) int {
	total := 0
	for _, objet := range j.Inventaire {
		total += PoidsObjet(objet)
	}
	return total
}

func afficherInventaire(j *personnage.Personnage) {
	fmt.Println("üß≥ Inventaire :")
	fmt.Printf("Or: %d\n", j.Argent)
	if estInventaireVide(j) {
		fmt.Println("Votre inventaire est vide.")
		return
	}

	noms, counts := compterItems(j)

	// S√©parer les mat√©riaux et les √©quipements
	var materiaux []string
	var equipements []string

	for _, item := range noms {
		if estMateriau(item) {
			materiaux = append(materiaux, item)
		} else {
			equipements = append(equipements, item)
		}
	}

	// Afficher la section Mat√©riaux
	if len(materiaux) > 0 {
		fmt.Println("\nüì¶ MAT√âRIAUX :")
		for i, item := range materiaux {
			label := item
			// Marquer les objets dropp√©s
			if strings.Contains(item, "[DROPP√â]") {
				label = strings.Replace(label, "[DROPP√â]", "üéÅ", 1)
			}
			if counts[item] > 1 {
				fmt.Printf("  %d. %s x%d\n", i+1, label, counts[item])
			} else {
				fmt.Printf("  %d. %s\n", i+1, label)
			}
		}
	}

	// Afficher la section √âquipements
	if len(equipements) > 0 {
		fmt.Println("\n‚öîÔ∏è √âQUIPEMENTS :")
		for i, item := range equipements {
			suffix := ""
			if estArmeEquipee(j, item) || estArmureEquipee(j, item) {
				suffix = "  [√âquip√©]"
			}
			label := item

			// Afficher les descriptions des potions
			switch strings.ToLower(item) {
			case "potion":
				label += " (+20 PV)"
			case "potion majeure":
				label += " (+50 PV)"
			case "potion force":
				label += " (+2 Force, 3 combats)"
			case "potion agilite":
				label += " (+2 Agilit√©, 3 combats)"
			case "potion endurance":
				label += " (+2 Endurance, 3 combats)"
			case "antidote":
				label += " (Gu√©rit statuts)"
			case "elixir vie":
				label += " (+100 PV)"
			}

			// Afficher les stats des armes
			if arme, ok := trouverArmeParNom(item); ok && arme.Nom != "" {
				label += fmt.Sprintf(" (ATK %d)", arme.EffetAttaque)
			}

			// Afficher les stats des armures
			if armure, ok := trouverArmureParNom(item); ok && armure.Nom != "" {
				label += fmt.Sprintf(" (DEF %d)", armure.EffetDefense)
			}

			// Marquer les objets dropp√©s
			if strings.Contains(item, "[DROPP√â]") {
				label = strings.Replace(label, "[DROPP√â]", "üéÅ", 1)
			}
			if counts[item] > 1 {
				fmt.Printf("  %d. %s x%d%s\n", i+1, label, counts[item], suffix)
			} else {
				fmt.Printf("  %d. %s%s\n", i+1, label, suffix)
			}
		}
	}
}

// afficherInventaireInteractif permet de naviguer avec ‚Üë/‚Üì et d'utiliser l'objet s√©lectionn√© avec Entr√©e
func afficherInventaireInteractif(j *personnage.Personnage) {
	// Si l'inventaire est vide, afficher et attendre une entr√©e
	if estInventaireVide(j) {
		afficherInventaire(j)
		fmt.Println("Appuyez sur Entr√©e pour continuer...")
		attendreEntree()
		return
	}

	if err := keyboard.Open(); err != nil {
		// fallback: simple affichage
		afficherInventaire(j)
		return
	}
	defer keyboard.Close()

	index := 0
	for {
		// Render gold and list (grouped) with cursor
		noms, counts := compterItems(j)
		fmt.Printf("Or: %d\n", j.Argent)
		for i, item := range noms {
			prefix := "  "
			if i == index {
				prefix = "> "
			}
			suffix := ""
			if estArmeEquipee(j, item) || estArmureEquipee(j, item) {
				suffix = "  [√âquip√©]"
			}
			label := item
			// Afficher les descriptions des potions
			switch strings.ToLower(item) {
			case "potion":
				label += " (+20 PV)"
			case "potion majeure":
				label += " (+50 PV)"
			case "potion force":
				label += " (+2 Force, 3 combats)"
			case "potion agilite":
				label += " (+2 Agilit√©, 3 combats)"
			case "potion endurance":
				label += " (+2 Endurance, 3 combats)"
			case "antidote":
				label += " (Gu√©rit statuts)"
			case "elixir vie":
				label += " (+100 PV)"
			}

			// Afficher les stats des armes
			if arme, ok := trouverArmeParNom(item); ok && arme.Nom != "" {
				label += fmt.Sprintf(" (ATK %d)", arme.EffetAttaque)
			}

			// Afficher les stats des armures
			if armure, ok := trouverArmureParNom(item); ok && armure.Nom != "" {
				label += fmt.Sprintf(" (DEF %d)", armure.EffetDefense)
			}

			// Marquer les objets dropp√©s
			if strings.Contains(item, "[DROPP√â]") {
				label = strings.Replace(label, "[DROPP√â]", "üéÅ", 1)
			}
			if counts[item] > 1 {
				fmt.Printf("%s%s x%d%s\n", prefix, label, counts[item], suffix)
			} else {
				fmt.Printf("%s%s%s\n", prefix, label, suffix)
			}
		}

		// Input
		char, key, err := keyboard.GetKey()
		if err != nil {
			return
		}

		// Clear rendered lines (gold line + items)
		for i := 0; i < len(noms)+1; i++ {
			fmt.Print("\033[A\033[2K")
		}

		switch key {
		case keyboard.KeyArrowUp:
			if index > 0 {
				index--
			} else {
				index = len(noms) - 1
			}
		case keyboard.KeyArrowDown:
			if index < len(noms)-1 {
				index++
			} else {
				index = 0
			}
		case keyboard.KeyEnter:
			// Use selected item by name
			if index >= 0 && index < len(noms) {
				_ = utiliserObjetNom(j, noms[index])
				// clamp after potential change
				noms2, _ := compterItems(j)
				if index >= len(noms2) && len(noms2) > 0 {
					index = len(noms2) - 1
				}
			}
			// brief feedback line
			fmt.Println("(Objet utilis√©. Appuyez sur Entr√©e pour continuer / ESC pour quitter)")
			// wait for key then clear the line
			_, k2, _ := keyboard.GetKey()
			fmt.Print("\033[A\033[2K")
			if k2 == keyboard.KeyEsc {
				return
			}
		case keyboard.KeyEsc:
			return
		default:
			if char == '\r' || char == '\n' {
				// treat as Enter
				if index >= 0 {
					_ = utiliserObjetNom(j, noms[index])
					noms2, _ := compterItems(j)
					if index >= len(noms2) && len(noms2) > 0 {
						index = len(noms2) - 1
					}
				}
			}
		}
		if char == 'q' || char == 'Q' {
			return
		}
	}
}

func afficherInventaireInteractifOld(j *personnage.Personnage) {
	// Afficher l'inventaire
	afficherInventaire(j)

	// Si l'inventaire est vide, attendre une entr√©e et retourner
	if estInventaireVide(j) {
		fmt.Println("Appuyez sur Entr√©e pour continuer...")
		attendreEntree()
		return
	}

	if err := keyboard.Open(); err != nil {
		// fallback: simple affichage
		afficherInventaire(j)
		return
	}
	defer keyboard.Close()

	index := 0
	for {
		// Render gold and list (grouped) with cursor
		noms, counts := compterItems(j)
		fmt.Printf("Or: %d\n", j.Argent)
		for i, item := range noms {
			prefix := "  "
			if i == index {
				prefix = "> "
			}
			suffix := ""
			if estArmeEquipee(j, item) || estArmureEquipee(j, item) {
				suffix = "  [√âquip√©]"
			}
			label := item
			// Afficher les descriptions des potions
			switch strings.ToLower(item) {
			case "potion":
				label += " (+20 PV)"
			case "potion majeure":
				label += " (+50 PV)"
			case "potion force":
				label += " (+2 Force, 3 combats)"
			case "potion agilite":
				label += " (+2 Agilit√©, 3 combats)"
			case "potion endurance":
				label += " (+2 Endurance, 3 combats)"
			case "antidote":
				label += " (Gu√©rit statuts)"
			case "elixir vie":
				label += " (+100 PV)"
			}

			// Afficher les stats des armes
			if arme, ok := trouverArmeParNom(item); ok && arme.Nom != "" {
				label += fmt.Sprintf(" (ATK %d)", arme.EffetAttaque)
			}

			// Afficher les stats des armures
			if armure, ok := trouverArmureParNom(item); ok && armure.Nom != "" {
				label += fmt.Sprintf(" (DEF %d)", armure.EffetDefense)
			}

			// Marquer les objets dropp√©s
			if strings.Contains(item, "[DROPP√â]") {
				label = strings.Replace(label, "[DROPP√â]", "üéÅ", 1)
			}
			if counts[item] > 1 {
				fmt.Printf("%s%s x%d%s\n", prefix, label, counts[item], suffix)
			} else {
				fmt.Printf("%s%s%s\n", prefix, label, suffix)
			}
		}

		// Input
		char, key, err := keyboard.GetKey()
		if err != nil {
			return
		}

		// Clear rendered lines (gold line + items)
		for i := 0; i < len(noms)+1; i++ {
			fmt.Print("\033[A\033[2K")
		}

		switch key {
		case keyboard.KeyArrowUp:
			if index > 0 {
				index--
			} else {
				index = len(noms) - 1
			}
		case keyboard.KeyArrowDown:
			if index < len(noms)-1 {
				index++
			} else {
				index = 0
			}
		case keyboard.KeyEnter:
			// Use selected item by name
			if index >= 0 && index < len(noms) {
				_ = utiliserObjetNom(j, noms[index])
				// clamp after potential change
				noms2, _ := compterItems(j)
				if index >= len(noms2) && len(noms2) > 0 {
					index = len(noms2) - 1
				}
			}
			// brief feedback line
			fmt.Println("(Objet utilis√©. Appuyez sur Entr√©e pour continuer / ESC pour quitter)")
			// wait for key then clear the line
			_, k2, _ := keyboard.GetKey()
			fmt.Print("\033[A\033[2K")
			if k2 == keyboard.KeyEsc {
				return
			}
		case keyboard.KeyEsc:
			return
		default:
			if char == '\r' || char == '\n' {
				// treat as Enter
				if index >= 0 {
					_ = utiliserObjetNom(j, noms[index])
					noms2, _ := compterItems(j)
					if index >= len(noms2) && len(noms2) > 0 {
						index = len(noms2) - 1
					}
				}
			}
		}
		if char == 'q' || char == 'Q' {
			return
		}
	}
}

func utiliserPotion(j *personnage.Personnage) {
	if retirerObjetParNom(j, "potion") {
		j.PVActuels += 20
		if j.PVActuels > j.PVMax {
			j.PVActuels = j.PVMax
		}
		fmt.Printf("üíñ Potion utilis√©e ! PV : %d/%d\n", j.PVActuels, j.PVMax)
		return
	}
	fmt.Println("‚ùå Vous n'avez pas de potion !")
}

func retirerObjet(j *personnage.Personnage, index int) {
	if index < 0 || index >= len(j.Inventaire) {
		return
	}
	j.Inventaire = append(j.Inventaire[:index], j.Inventaire[index+1:]...)
}

// ajouterObjet ajoute un objet √† l'inventaire
func ajouterObjet(j *personnage.Personnage, objet string) bool {
	poidsActuel := PoidsTotal(j)
	poidsAjout := PoidsObjet(objet)
	if poidsActuel+poidsAjout > PoidsMaxInventaire {
		fmt.Printf("‚ùå Trop lourd: %s (poids %d). Poids actuel %d/%d.\n", objet, poidsAjout, poidsActuel, PoidsMaxInventaire)
		return false
	}
	j.Inventaire = append(j.Inventaire, objet)
	return true
}

// retirerObjetParNom retire le premier objet correspondant (insensible √† la casse)
// et retourne true si un objet a √©t√© retir√©
func retirerObjetParNom(j *personnage.Personnage, nom string) bool {
	for i := range j.Inventaire {
		if strings.EqualFold(j.Inventaire[i], nom) {
			retirerObjet(j, i)
			return true
		}
	}
	return false
}

func estInventaireVide(j *personnage.Personnage) bool {
	return len(j.Inventaire) == 0
}

// utiliserObjetNom permet d'utiliser un objet par son nom (insensible √† la casse).
// - Potion: soigner et consommer
// - Arme: √©quiper (met √† jour p.Attaque), ne consomme pas
// - Armure: afficher/equiper visuellement (ne consomme pas)
func utiliserObjetNom(j *personnage.Personnage, nom string) bool {
	// G√©rer toutes les potions
	switch strings.ToLower(nom) {
	case "potion":
		utiliserPotion(j)
		return true
	case "potion majeure":
		utiliserPotionMajeure(j)
		return true
	case "potion force":
		utiliserPotionForce(j)
		return true
	case "potion agilite":
		utiliserPotionAgilite(j)
		return true
	case "potion endurance":
		utiliserPotionEndurance(j)
		return true
	case "antidote":
		utiliserAntidote(j)
		return true
	case "elixir vie":
		utiliserElixirVie(j)
		return true
	}

	// Tente une correspondance avec les armes connues via cl√©s et noms affich√©s
	if arme, ok := trouverArmeParNom(nom); ok {
		// Toggle: si d√©j√† √©quip√©e, on d√©s√©quipe
		if strings.EqualFold(j.Attaque, arme.Nom) {
			j.Attaque = ""
			fmt.Printf("üî™ Arme d√©s√©quip√©e: %s\n", arme.Nom)
		} else {
			j.Attaque = arme.Nom
			fmt.Printf("üî™ Arme √©quip√©e: %s (Attaque %d)\n", arme.Nom, arme.EffetAttaque)
			objet.AfficherArme(arme)
		}
		return true
	}

	// Tente une correspondance avec les armures connues via cl√©s et noms affich√©s
	if arm, ok := trouverArmureParNom(nom); ok {
		if arm.Nom == "" {
			fmt.Println("‚ùå Armure inconnue.")
			return false
		}
		if j.ArmuresEquipees == nil {
			j.ArmuresEquipees = make(map[string]bool)
		}
		// Toggle equip/desequip
		if j.ArmuresEquipees[arm.Nom] {
			delete(j.ArmuresEquipees, arm.Nom)
			fmt.Printf("üõ°Ô∏è Armure d√©s√©quip√©e: %s\n", arm.Nom)
		} else {
			j.ArmuresEquipees[arm.Nom] = true
			fmt.Printf("üõ°Ô∏è Armure √©quip√©e: %s (DEF %d)\n", arm.Nom, arm.EffetDefense)
		}
		objet.AfficherArmure(arm)
		return true
	}

	fmt.Println("‚ùå Objet inconnu/impropre √† l'utilisation.")
	return false
}

// estArmeEquipee indique si le texte d'un item correspond √† l'arme actuellement √©quip√©e
func estArmeEquipee(j *personnage.Personnage, item string) bool {
	if j.Attaque == "" {
		return false
	}
	// correspondance via cl√©s et noms affich√©s
	if arme, ok := trouverArmeParNom(item); ok {
		return strings.EqualFold(j.Attaque, arme.Nom)
	}
	return false
}

// estArmureEquipee indique si le texte d'un item correspond √† une armure √©quip√©e dans un slot
func estArmureEquipee(j *personnage.Personnage, item string) bool {
	if j.ArmuresEquipees == nil {
		return false
	}
	// normaliser par nom d'affichage (objet.CreerArmure renvoie .Nom)
	if arm, ok := trouverArmureParNom(item); ok {
		return j.ArmuresEquipees[arm.Nom]
	}
	return false
}

// compterItems regroupe l'inventaire par nom et renvoie l'ordre et les quantit√©s
func compterItems(j *personnage.Personnage) ([]string, map[string]int) {
	counts := make(map[string]int)
	order := []string{}
	for _, it := range j.Inventaire {
		if _, ok := counts[it]; !ok {
			order = append(order, it)
		}
		counts[it]++
	}
	return order, counts
}

// utiliserObjetSelection utilise l'objet √† l'index (1-based pour l'affichage) si possible
func utiliserObjetSelection(j *personnage.Personnage, indexAffiche int) bool {
	index := indexAffiche - 1
	if index < 0 || index >= len(j.Inventaire) {
		fmt.Println("‚ùå Index invalide.")
		return false
	}
	nom := j.Inventaire[index]
	ok := utiliserObjetNom(j, nom)
	// Consommation uniquement pour potion (d√©j√† g√©r√©e par utiliserPotion via retirerObjetParNom)
	return ok
}

// --- Helpers de correspondance objets ---

func trouverArmeParNom(nom string) (objet.Arme, bool) {
	// Liste des cl√©s d'armes support√©es par objet.CreerArme
	cles := []string{
		"EpeeRouillee", "EpeeFer", "EpeeMagique", "EpeeCourte",
		"Hache", "HacheDeCombat", "HacheDeBataille",
		"ArcBois", "ArcLong", "ArcElfe",
	}
	needle := strings.ToLower(strings.TrimSpace(nom))
	for _, cle := range cles {
		a := objet.CreerArme(cle)
		if strings.EqualFold(needle, cle) || strings.EqualFold(needle, a.Nom) {
			return a, true
		}
	}
	return objet.Arme{}, false
}

func trouverArmureParNom(nom string) (objet.Armure, bool) {
	cles := []string{
		// Casques
		"CasqueCuir", "CasqueCuirRenforce", "CasqueFer", "CasqueFerRenforce",
		// Plastrons
		"PlastronCuir", "PlastronCuirRenforce", "PlastronFer", "PlastronFerRenforce",
		// Pantalons
		"PantalonCuir", "PantalonCuirRenforce", "PantalonFer", "PantalonFerRenforce",
		// Chaussures
		"BottesCuir", "BottesCuirRenforce", "BottesFer", "BottesFerRenforce",
	}
	needle := strings.ToLower(strings.TrimSpace(nom))
	for _, cle := range cles {
		ar := objet.CreerArmure(cle)
		if strings.EqualFold(needle, cle) || strings.EqualFold(needle, ar.Nom) {
			return ar, true
		}
	}
	return objet.Armure{}, false
}

// Nouvelles fonctions de potions

func utiliserPotionMajeure(j *personnage.Personnage) {
	if retirerObjetParNom(j, "potion majeure") {
		j.PVActuels += 50
		if j.PVActuels > j.PVMax {
			j.PVActuels = j.PVMax
		}
		fmt.Printf("üíñ Potion majeure utilis√©e ! PV : %d/%d\n", j.PVActuels, j.PVMax)
		return
	}
	fmt.Println("‚ùå Vous n'avez pas de potion majeure !")
}

func utiliserPotionForce(j *personnage.Personnage) {
	if retirerObjetParNom(j, "potion force") {
		j.BuffForce += 2
		j.BuffCombats = 3
		fmt.Printf("üí™ Potion de force utilis√©e ! Force +2 pour 3 combats\n")
		return
	}
	fmt.Println("‚ùå Vous n'avez pas de potion de force !")
}

func utiliserPotionAgilite(j *personnage.Personnage) {
	if retirerObjetParNom(j, "potion agilite") {
		j.BuffAgilite += 2
		j.BuffCombats = 3
		fmt.Printf("üèÉ Potion d'agilit√© utilis√©e ! Agilit√© +2 pour 3 combats\n")
		return
	}
	fmt.Println("‚ùå Vous n'avez pas de potion d'agilit√© !")
}

func utiliserPotionEndurance(j *personnage.Personnage) {
	if retirerObjetParNom(j, "potion endurance") {
		j.BuffEndurance += 2
		j.BuffCombats = 3
		// Augmenter temporairement les PV max
		oldPVMax := j.PVMax
		j.PVMax += 20     // +2 Endurance = +20 PV
		j.PVActuels += 20 // Bonus imm√©diat de PV
		fmt.Printf("‚ù§Ô∏è Potion d'endurance utilis√©e ! Endurance +2, PV Max %d‚Üí%d pour 3 combats\n", oldPVMax, j.PVMax)
		return
	}
	fmt.Println("‚ùå Vous n'avez pas de potion d'endurance !")
}

func utiliserAntidote(j *personnage.Personnage) {
	if retirerObjetParNom(j, "antidote") {
		fmt.Printf("üß™ Antidote utilis√© ! Tous les statuts n√©gatifs sont gu√©ris\n")
		// Note: La logique de gu√©rison des statuts sera g√©r√©e dans le combat
		return
	}
	fmt.Println("‚ùå Vous n'avez pas d'antidote !")
}

func utiliserElixirVie(j *personnage.Personnage) {
	if retirerObjetParNom(j, "elixir vie") {
		j.PVActuels += 100
		if j.PVActuels > j.PVMax {
			j.PVActuels = j.PVMax
		}
		fmt.Printf("‚ú® √âlixir de vie utilis√© ! PV : %d/%d\n", j.PVActuels, j.PVMax)
		return
	}
	fmt.Println("‚ùå Vous n'avez pas d'√©lixir de vie !")
}
